import math
from typing import List, Union

def create_table(text: str, key: str, pad_char: str = 'X') -> List[List[str]]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º"""
    cols = len(key)
    rows = math.ceil(len(text) / cols)
    padded_text = text.ljust(rows * cols, pad_char)
    return [list(padded_text[i*cols:(i+1)*cols]) for i in range(rows)]

def encrypt_tabular(text: Union[str, int], key: Union[str, int]) -> str:
    """–®–∏—Ñ—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ç–∞–±–ª–∏—á–Ω—ã–º —à–∏—Ñ—Ä–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    if not isinstance(text, str) or not isinstance(key, str):
        raise TypeError("–¢–µ–∫—Å—Ç –∏ –∫–ª—é—á –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏")
    
    if not text or not key:
        return text
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    cleaned_text = ''.join(c.upper() for c in text if c.isalpha())
    if not cleaned_text:
        return ""
    
    table = create_table(cleaned_text, key)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–∞
    key_order = [i for i, _ in sorted(enumerate(key), key=lambda x: x[1])]
    
    # –ß–∏—Ç–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –≤ –ø–æ—Ä—è–¥–∫–µ –∫–ª—é—á–∞
    ciphertext = []
    for col in key_order:
        for row in table:
            ciphertext.append(row[col])
    return ''.join(ciphertext)

def decrypt_tabular(ciphertext: Union[str, int], key: Union[str, int]) -> str:
    """–î–µ—à–∏—Ñ—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ç–∞–±–ª–∏—á–Ω—ã–º —à–∏—Ñ—Ä–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    if not isinstance(ciphertext, str) or not isinstance(key, str):
        raise TypeError("–®–∏—Ñ—Ä—Ç–µ–∫—Å—Ç –∏ –∫–ª—é—á –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏")
    
    if not ciphertext or not key:
        return ciphertext
    
    cols = len(key)
    if len(ciphertext) % cols != 0:
        raise ValueError("–î–ª–∏–Ω–∞ —à–∏—Ñ—Ä—Ç–µ–∫—Å—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ –¥–ª–∏–Ω–µ –∫–ª—é—á–∞")
    
    rows = len(ciphertext) // cols
    key_order = [i for i, _ in sorted(enumerate(key), key=lambda x: x[1])]
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    table = [[''] * cols for _ in range(rows)]
    index = 0
    
    for col in key_order:
        for row in range(rows):
            table[row][col] = ciphertext[index]
            index += 1
    
    # –ß–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –∏ —É–¥–∞–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    plaintext = ''.join([''.join(row) for row in table])
    return plaintext.rstrip('X')

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    samples = [
        ("ATTACK AT DAWN", "LEMON"),
        ("THE QUICK BROWN FOX", "KEY"),
        ("PYTHON IS AWESOME", "CODE"),
        ("KEEP IT SECRET", "LOCK"),
        ("FINAL TEST CASE", "TEST")
    ]
    
    print("üîê –¢–∞–±–ª–∏—á–Ω—ã–π —à–∏—Ñ—Ä - –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã")
    for i, (text, key) in enumerate(samples, 1):
        encrypted = encrypt_tabular(text, key)
        decrypted = decrypt_tabular(encrypted, key)
        
        print(f"\n–ü—Ä–∏–º–µ—Ä {i}:")
        print(f"–û—Ä–∏–≥–∏–Ω–∞–ª:  {text}")
        print(f"–ö–ª—é—á:      {key}")
        print(f"–®–∏—Ñ—Ä—Ç–µ–∫—Å—Ç: {encrypted}")
        print(f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {decrypted}")